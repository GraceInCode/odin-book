// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  password       String? // Hashed: required for passprt-local, optional for Oauth
  profilePicture String? // URL (Gravatar or uploaded)
  bio            String? // Optional profile info
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts     Post[] // User's own posts
  likes     Like[] // Likes given by user
  comments  Comment[] // comments made by user
  following Follow[]  @relation("follower") // Users this user follows
  followers Follow[]  @relation("followed") // Users following this user

  @@index([email])
  @@index([username])
}

model Follow {
  followerId Int
  followedId Int
  status     FollowStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId]) // Composite key prevents duplicates
  @@index([followerId])
  @@index([followedId])
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  imageUrl  String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]

  @@index([userId])
  @@index([createdAt(sort: Desc)]) // For efficient feed sorting
}

model Like {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId]) // Prevents duplicate likes
  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt(sort: Desc)])
}
